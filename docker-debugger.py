#!/usr/bin/python3

import sys
import os
import base64

POSITIONAL_ARGUMENTS = 1
GDBSERVER_PORT = 1234
DOCKER_PATH = "./"
HELP = '''
Usage: docker-debugger /path/to/challenge/binary/in/docker


OPTIONS:
    -r --restore-backup: restore the backups (Usable only if there are Dockerfile.bak and dokcer-compose.bak files)
    -u --docker-path: path to the Dokcerfile and docker-compose.yml (default: ./)
    -p --port: port where gdbserver will listen (default: 1234)
    -h --help: print this message
'''
CHALLENGE_PATH = ""
BINARY_NAME = "debugging_bin"
BINARY = b""
DOCKER_SETUP = f'''

# DOCKER SETUP BY docker-debugger
COPY {BINARY_NAME} /{BINARY_NAME}
RUN apt update
RUN apt install -y gdbserver

'''

# Routine to restore the backup if -r (--restore-backup) argument is passed
def restore():
    restored = False
    try:
        f1 = open("Dockerfile.bak", "r")
        f2 = open("docker-compose.bak", "r")
        dockerfile = f1.read()
        docker_compose = f2.read()
        f1.close()
        f2.close()
        f = open("Dockerfile", "w")
        f.write(dockerfile)
        f.close()
        f = open("docker-compose.yml", "w")
        f.write(docker_compose)
        f.close()
        print("Backup successfully restored")
        restored = True
        exit(0)
    except:
        if restored == True:
            exit()
        print("Backup restore failed")
        exit(1)

# Parse command line arguments
def arg_parser():
    global DOCKER_PATH, GDBSERVER_PORT, CHALLENGE_PATH
    if len(sys.argv) < 2:
        print(HELP)
        exit(1)
    positional_arguments = 0
    i = 1
    while i < len(sys.argv):
        arg = sys.argv[i]

        if arg == "-h" or arg == "--help":
            print(HELP)
            exit()

        elif arg == "-r" or arg == "--restore-backup":
            restore()
            exit()

        elif arg == "-u" or arg == "--docker-path":
            if (i + 1) >= len(sys.argv):
                print(HELP)
                exit(1)
            path = sys.argv[i + 1]
            if os.path.exists(path):
                DOCKER_PATH = path
            else:
                print("Invalid path!")
                exit(1)
            i = i + 1
        
        elif arg == "-p" or arg == "--port":
            if (i + 1) >= len(sys.argv):
                print(HELP)
                exit(1)
            port = sys.argv[i + 1]
            try:
                port = int(port)
            except:
                print("Port must be an integer!")
                exit(1)
            if port <= 0 or port > 65535:
                print("Port must be in range 1-65535")
                exit(1)
            GDBSERVER_PORT = port
            i = i + 1
        
        else:
            if positional_arguments >= POSITIONAL_ARGUMENTS:
                print("To much arguments!")
                print(HELP)
                exit(1)
            if positional_arguments == 0:
                CHALLENGE_PATH = arg
            positional_arguments = positional_arguments + 1
        i = i + 1


# Parse the socat command runned in the Dockerfile
def docker_cmd_arg_extract(command):
    # Put all the command in one line to parse it easily
    inline_command = command.split("\\")
    for i in range(len(inline_command)):
        inline_command[i] = inline_command[i].strip() + " "
    inline_command = "".join(inline_command)

    # Construct a list containing the arguments
    command_args = inline_command[len("CMD socat "):]
    args_list = ["socat"]
    new_arg = ""
    in_string = False
    for car in command_args:
        if car == " " and in_string == False:
            args_list.append(new_arg)
            new_arg = ""
            continue
        elif car == '"':
            in_string = not in_string
        new_arg = new_arg + car
    if new_arg != "":
        args_list.append(new_arg)
    return args_list

# Add the socat verbose option (-d -d) to the arguments
def add_verbose(arguments):
    new_args = []
    new_args.append(arguments[0])
    new_args.append("-d")
    new_args.append("-d")
    new_args = new_args + arguments[1:]
    return new_args

# Add the option field with value value to the docker-compose passed as a string in compose
def add_compose_option(compose ,field, value):
    field_indentation = ""
    value_identation = ""
    is_value = False
    for line in compose.split("\n"):
        if is_value == True:
            value_identation = line[:line.find("-")]
            break
        if "ports:" in line:
            field_indentation = line[:line.find("ports:")]
            is_value = True

    new_compose = compose[:compose.find(f"{field_indentation}ports:")] +\
                  f"{field_indentation}{field}:\n{value_identation}- {value}\n" +\
                  compose[compose.find(f"{field_indentation}ports:"):]
    return new_compose
    

def main():
    arg_parser()

    # Check for Dockerfile
    dockerfile_path = os.path.join(DOCKER_PATH, "Dockerfile")
    compose_yml_path = os.path.join(DOCKER_PATH, "docker-compose.yml")
    compose_yaml_path = os.path.join(DOCKER_PATH, "docker-compose.yaml")

    if not os.path.isfile(dockerfile_path):
        print("Dockerfile not found in the specified path.")
        exit(1)

    # Rename docker-compose.yaml to docker-compose.yml
    if os.path.isfile(compose_yaml_path) and not os.path.isfile(compose_yml_path):
        os.rename(compose_yaml_path, compose_yml_path)

    if not os.path.isfile(compose_yml_path):
        print("docker-compose.yml not found in the specified path.")
        exit(1)

    # Open Dockerfile
    f = open(dockerfile_path, "r")
    dockerfile = f.read()
    f.close()

    # Check if Dockerfile has been patched yet
    if "# DOCKER SETUP BY docker-debugger" in dockerfile:
        print("Project alredy patched, restore the backup before using docker-debugger again")
        exit(1)

    # Check if Dockerfile use socat
    command = dockerfile[dockerfile.find("CMD "):]
    if not "socat" in command:
        print("This docker doesn't use socat...")
        exit(1)
    
    # Parse the command executed by Dockerfile and add verbose option to the socat command
    args_list = docker_cmd_arg_extract(command)
    args_list = add_verbose(args_list)

    # Write arguments to pass them as arguments in the new Dockerfile command
    cli_args = ""
    for elem in args_list:
        cli_args = cli_args + " " + elem

    # Generating debugging_bin
    f = open(f"{BINARY_NAME}", "wb")
    f.write(base64.b64decode(BINARY))
    f.close()
    os.chmod(f"{BINARY_NAME}", 0o755)


    # Write a backup of Dockerfile in Dockerfile.bak
    f = open(dockerfile_path + ".bak", "w")
    f.write(dockerfile)
    f.close()

    # patch Dockerfile
    patched_command = f"CMD /{BINARY_NAME} {CHALLENGE_PATH} {GDBSERVER_PORT}{cli_args}"
    nuovo = dockerfile.split("CMD")
    nuovo[0] = nuovo[0] + DOCKER_SETUP + "# OLD EXECUTION COMMAND\n" + "# CMD"
    nuovo[1] =  nuovo[1].replace("\n", "\n#") + "\n\n" + patched_command
    nuovo = "".join(nuovo)
    f = open("Dockerfile", "w")
    f.write(nuovo)
    f.close()

    # Write backup for docker-compose.yml in docker-compose.bak
    f = open(compose_yml_path, "r")
    docker_compose = f.read()
    f.close()
    f = open(compose_yml_path.replace("yml", "bak"), "w")
    f.write(docker_compose)
    f.close()

    # Patch docker-compose.yml
    nuovo = docker_compose.split("ports:")
    identation = nuovo[1].split("\n")[1]
    identation = identation[:identation.find("-")]
    nuovo[0] = nuovo[0] + "ports:\n"
    nuovo[1] = (identation + f"- {GDBSERVER_PORT}:{GDBSERVER_PORT}") + nuovo[1]
    nuovo = "".join(nuovo)
    nuovo = add_compose_option(nuovo, "cap_add", "SYS_PTRACE")
    nuovo = add_compose_option(nuovo, "security_opt", "seccomp=unconfined")
    f = open(compose_yml_path, "w")
    f.write(nuovo)
    f.close()

if __name__ == "__main__":
    main()